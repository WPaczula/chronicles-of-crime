{"version":3,"sources":["components/Card/index.tsx","components/CardList/index.tsx","components/App/reducer.ts","components/App/actions.ts","hooks/useSocket.ts","components/ColorPicker/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Card","number","description","isToggled","toggleCard","color","onClick","React","className","role","style","boxShadow","undefined","CardList","cards","toggledCards","map","i","key","selected","getInitialState","reduce","state","_","enablePatches","producer","draft","action","type","cardColor","wasSelected","applyPatches","patches","reducerWithPatches","produceWithPatches","reducer","produce","useSocket","url","onMessage","socket","messageHandler","createdSocket","WebSocket","onmessage","event","data","JSON","parse","current","close","readyState","send","stringify","ColorPicker","selectedColor","onChange","colors","width","circleSize","onChangeComplete","backgroundColor","serverUrl","process","App","setSelectedColor","hex","setToggledCards","dispatch","nextState","toggleCardAction","toast","position","pauseOnHover","autoClose","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65f0c925.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./styles.scss\";\n\nexport interface ICardProps {\n  number: number;\n  description: string;\n  isToggled: boolean;\n  toggleCard(number: number): void;\n  color?: string;\n}\n\nconst Card: React.FunctionComponent<ICardProps> = ({\n  number,\n  description,\n  isToggled,\n  toggleCard,\n  color\n}) => {\n  const onClick = React.useCallback(() => {\n    toggleCard(number);\n  }, [toggleCard, number]);\n\n  return (\n    <div\n      className=\"card\"\n      onClick={onClick}\n      role=\"presentation\"\n      style={\n        isToggled && color\n          ? { boxShadow: `0 0 1.1em 0.5em ${color}` }\n          : undefined\n      }\n    >\n      <div className=\"card__main\">\n        <p className=\"card__description\">{description}</p>\n      </div>\n      <footer className=\"card__footer\">\n        <div className=\"card__number\">{number}</div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Card;\n","import * as React from \"react\";\nimport Card from \"components/Card\";\nimport { ToggledCards } from \"components/App/reducer\";\nimport \"./styles.scss\";\n\ninterface ICardListProps {\n  cards: string[];\n  toggledCards: ToggledCards;\n  toggleCard: (number: number) => void;\n}\n\nconst CardList: React.FunctionComponent<ICardListProps> = ({\n  cards,\n  toggledCards,\n  toggleCard\n}) => {\n  return (\n    <div className=\"card-list\">\n      {cards.map((description, i) => (\n        <Card\n          number={i + 1}\n          key={description}\n          description={description}\n          isToggled={toggledCards[i + 1].selected}\n          color={toggledCards[i + 1].color}\n          toggleCard={toggleCard}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import produce, {\n  Draft,\n  produceWithPatches,\n  enablePatches,\n  applyPatches\n} from \"immer\";\nimport { Actions, TOGGLE_CARD, APPLY_PATCHES } from \"components/App/actions\";\nimport cards from \"data/cards.json\";\n\ntype CardState =\n  | {\n      selected: true;\n      color: string;\n    }\n  | {\n      selected: false;\n      color: undefined;\n    };\nexport interface ToggledCards {\n  readonly [number: number]: CardState;\n}\n\nexport const getInitialState = (): ToggledCards =>\n  cards.reduce(\n    (state, _, i) => ({\n      ...state,\n      [i + 1]: { selected: false, color: undefined }\n    }),\n    {}\n  );\n\nenablePatches();\nconst producer = (draft: Draft<ToggledCards>, action: Actions) => {\n  switch (action.type) {\n    case TOGGLE_CARD: {\n      const cardColor = draft[action.number].color;\n      if (cardColor === action.color || cardColor === undefined) {\n        const wasSelected = draft[action.number].selected;\n        draft[action.number] = wasSelected\n          ? {\n              selected: false,\n              color: undefined\n            }\n          : {\n              selected: true,\n              color: action.color\n            };\n      }\n      break;\n    }\n\n    case APPLY_PATCHES: {\n      applyPatches(draft, action.patches);\n    }\n  }\n};\nexport const reducerWithPatches = produceWithPatches(producer);\nexport const reducer = produce(producer);\n","import { Patch } from \"immer\";\nimport { ActionType } from \"typesafe-actions\";\n\nexport const TOGGLE_CARD = \"TOGGLE_CARD\";\nexport const APPLY_PATCHES = \"APPLY_PATCHES\";\n\nexport const toggleCard = (number: number, color: string) => ({\n  type: TOGGLE_CARD as typeof TOGGLE_CARD,\n  color,\n  number\n});\n\nexport const applyPatches = (patches: Patch[]) => ({\n  type: APPLY_PATCHES as typeof APPLY_PATCHES,\n  patches\n});\n\nexport type Actions =\n  | ActionType<typeof toggleCard>\n  | ActionType<typeof applyPatches>;\n","import * as React from \"react\";\n\ntype MessageHandler<Data> = (data: Data) => void;\n\nfunction useSocket<Data>(url: string, onMessage: MessageHandler<Data>) {\n  const socket = React.useRef<WebSocket>();\n  const messageHandler = React.useRef<MessageHandler<Data>>(onMessage);\n\n  React.useEffect(() => {\n    const createdSocket = new WebSocket(url);\n    createdSocket.onmessage = event => {\n      const data: Data = JSON.parse(event.data);\n      messageHandler.current(data);\n    };\n\n    socket.current = createdSocket;\n\n    return () => {\n      createdSocket.close();\n    };\n  }, [url]);\n\n  return React.useCallback((data: Data) => {\n    if (socket.current?.readyState === 1) {\n      socket.current?.send(JSON.stringify(data));\n    }\n  }, []);\n}\n\nexport default useSocket;\n","import * as React from \"react\";\nimport { CirclePicker, ColorChangeHandler } from \"react-color\";\nimport \"./styles.scss\";\n\ninterface ColorPickerProps {\n  onChange: ColorChangeHandler;\n  selectedColor?: string;\n}\n\nconst ColorPicker: React.FunctionComponent<ColorPickerProps> = ({\n  selectedColor,\n  onChange\n}) => {\n  return (\n    <div className=\"color-picker\">\n      {selectedColor === undefined ? (\n        <CirclePicker\n          colors={[\n            \"#e91e63\",\n            \"#9c27b0\",\n            \"#3f51b5\",\n            \"#21F6f3\",\n            \"#4caf50\",\n            \"#ffeb3b\",\n            \"#FF8C00\",\n            \"#000000\"\n          ]}\n          width=\"auto\"\n          circleSize={25}\n          onChangeComplete={onChange}\n        />\n      ) : (\n        <div\n          style={{ backgroundColor: selectedColor }}\n          className=\"color-picker__selected-color\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import * as React from \"react\";\nimport cards from \"data/cards.json\";\nimport CardList from \"components/CardList\";\nimport {\n  reducer,\n  reducerWithPatches,\n  getInitialState\n} from \"components/App/reducer\";\nimport {\n  toggleCard as toggleCardAction,\n  Actions,\n  applyPatches\n} from \"components/App/actions\";\nimport useSocket from \"hooks/useSocket\";\nimport \"./styles.scss\";\nimport { Patch } from \"immer\";\nimport ColorPicker from \"components/ColorPicker\";\nimport { ColorChangeHandler } from \"react-color\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ninterface IAppProps {}\n\nconst serverUrl: string =\n  process.env.REACT_APP_WEBSOCKET_URL ?? \"ws://localhost:5001\";\n\nconst App: React.FunctionComponent<IAppProps> = () => {\n  const [selectedColor, setSelectedColor] = React.useState<string>();\n\n  const onChange: ColorChangeHandler = React.useCallback(color => {\n    setSelectedColor(color.hex);\n  }, []);\n\n  const [toggledCards, setToggledCards] = React.useState(getInitialState);\n\n  const send = useSocket<Patch[]>(serverUrl, (patches: Patch[]) => {\n    setToggledCards(current => reducer(current, applyPatches(patches)));\n  });\n\n  const dispatch = React.useCallback(\n    (action: Actions) => {\n      setToggledCards(current => {\n        const [nextState, patches] = reducerWithPatches(current, action);\n\n        send(patches);\n        return nextState;\n      });\n    },\n    [send]\n  );\n\n  const toggleCard = React.useCallback(\n    (number: number) => {\n      if (selectedColor) {\n        dispatch(toggleCardAction(number, selectedColor));\n      } else {\n        toast(\"Choose a color first!\", {\n          type: \"error\",\n          position: \"top-center\",\n          pauseOnHover: false,\n          autoClose: 2000\n        });\n      }\n    },\n    [dispatch, selectedColor]\n  );\n\n  return (\n    <div className=\"app\">\n      <ToastContainer />\n      <ColorPicker selectedColor={selectedColor} onChange={onChange} />\n      <CardList\n        cards={cards}\n        toggleCard={toggleCard}\n        toggledCards={toggledCards}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}